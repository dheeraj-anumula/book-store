# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: book-store
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
plugins:
  - serverless-dotenv-plugin
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x

  # you can overwrite defaults here
  stage: '${opt:stage, "dev"}'
  region: ap-south-1

  environment:
    PGHOST: ${env:PGHOST}
    PGUSER: ${env:PGUSER}
    PGDATABASE: ${env:PGDATABASE}
    PGPASSWORD: ${env:PGPASSWORD}
    PGPORT: ${env:PGPORT}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  currentStage: '${opt:stage, self:provider.stage}'
  autoswagger:
    title: 'Product store'
    apiType: 'http'
    typefiles: ['src/types/product.ts']
    generateSwaggerOnDeploy: true
    swaggerPath: 'swagger'
    basePath: '/${self:provider.stage}'
    host: 'os1u2n4md2.execute-api.ap-south-1.amazonaws.com'
    schemes: ['https']

# you can add packaging information here
package:
  individually: true
  exclude:
    - ./**

stages: ['dev', 'prod']

functions:
  getProductsById:
    handler: src/functions/getProductsById/handler.default
    package:
      patterns:
        - 'src/functions/getProductsById/**'
    events:
      - http:
          path: products/{productId}
          method: GET
          cors: true
          responseData:
            {
              200: { description: 'Successfull response for product', bodyType: Product },
              400: { description: 'Bad request: productId is required' },
              404: { description: 'Product is not found' },
              500: { description: 'Internal server error' },
            }

  getProductsList:
    handler: src/functions/getProductsList/handler.default
    package:
      patterns:
        - 'src/functions/getProductsList/**'
    events:
      - http:
          path: products
          method: GET
          cors: true
          responseData:
            {
              200: { description: 'Successfull response for products', bodyType: Products },
              500: { description: 'Internal server error' },
            }
  createProduct:
    handler: src/functions/createProduct/handler.default
    package:
      patterns:
        - 'src/functions/createProduct/**'
    events:
      - http:
          path: products
          method: POST
          cors: true
          responseData:
            {
              201: { description: 'Product successfully created', bodyType: Products },
              400: { description: 'Bad request' },
              500: { description: 'Internal server error' },
            }
