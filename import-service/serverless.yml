# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

plugins:
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs14.x
  stage: '${opt:stage, "dev"}'
  region: ap-south-1

  environment:
    REGION: "${self:provider.region}"
    SQS_NEW_PRODUCT_URL:
      Ref: NewProductSQSQueue
    CATALOG_QUEUE_URL:
      "Fn::ImportValue": "catalogItemsQueueUrl-${opt:stage, self:provider.stage}"
    CATALOG_QUEUE_ARN:
      "Fn::ImportValue": "catalogItemsQueueArn-${opt:stage, self:provider.stage}"

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource: arn:aws:s3:::import-service-node-in-aws
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "arn:aws:s3:::import-service-node-in-aws/*"
        - Effect: "Allow"
          Action:
            - "sqs:*"
          Resource:
            "Fn::ImportValue": "catalogItemsQueueArn-${opt:stage, self:provider.stage}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  importProductsFile:
    handler: src/functions/importProductsFile.default
    events:
      - http:
          path: /import
          method: GET
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: src/functions/importFileParser.default
    events:
      - s3:
          bucket: import-service-node-in-aws
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    NewProductSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
  Outputs:
    NewProductSQSQueueArn:
      Value:
        "Fn::GetAtt": [NewProductSQSQueue, Arn]
